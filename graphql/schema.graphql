directive @withAuthMetrics on FIELD_DEFINITION

directive @withOwnerId on FIELD_DEFINITION

type Query {
  """
  Returns a specified product
  """
  product(
    """
    Product slug
    """
    slug: String
    """
    Product identifier
    """
    identifier: ProductUniqueIdentifier
  ): Product
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  """
  Returns products list filtered and ordered
  """
  productSearch(
    """
    Terms that is used in search e.g.: eletronics/samsung
    """
    query: String = ""
    """
    Defines terms types: Brand, Category, Department e.g.: c,b
    """
    map: String = ""
    """
    Filter by category. {a}/{b} - {a} and {b} are categoryIds
    """
    category: String = ""
    """
    Array of product specification. specificationFilter_{a}:{b} - {a} is the specificationId, {b} = specification value
    """
    specificationFilters: [String]
    """
    Filter by price range. e.g.: {a} TO {b} - {a} is the minimum price "from" and {b} is the highest price "to"
    """
    priceRange: String = ""
    """
    Filter by collection. where collection also know as productClusterId
    """
    collection: String = ""
    """
    Filter by availability at a specific sales channel. e.g.: salesChannel:4 if want filter by available products for the sales channel 4
    """
    salesChannel: String = ""
    """
    Order by a criteria. OrderByPriceDESC/OrderByPriceASC, OrderByTopSaleDESC, OrderByReviewRateDESC, OrderByNameASC/OrderByNameDESC, OrderByReleaseDateDESC, OrderByBestDiscountDESC, OrderByScoreDESC
    """
    orderBy: String = "OrderByScoreDESC"
    """
    Pagination item start
    """
    from: Int = 0
    """
    Pagination item end
    """
    to: Int = 9
    """
    If true, uses isAvailablePerSalesChannel_ parameter on query with segment's sales channel. Will override any given salesChannel arg
    """
    hideUnavailableItems: Boolean = false
  ): ProductSearch
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  searchMetadata(
    """
    Terms that is used in search e.g.: eletronics/samsung
    """
    query: String = ""
    """
    Defines terms types: Brand, Category, Department e.g.: c,b
    """
    map: String = ""
  ): SearchMetadata
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  """
  Returns products list filtered and ordered
  """
  products(
    """
    Terms that is used in search e.g.: eletronics/samsung
    """
    query: String = ""
    """
    Defines terms types: Brand, Category, Department e.g.: c,b
    """
    map: String = ""
    """
    Filter by category. {a}/{b} - {a} and {b} are categoryIds
    """
    category: String = ""
    """
    Array of product specification. specificationFilter_{a}:{b} - {a} is the specificationId, {b} = specification value
    """
    specificationFilters: [String]
    """
    Filter by price range. e.g.: {a} TO {b} - {a} is the minimum price "from" and {b} is the highest price "to"
    """
    priceRange: String = ""
    """
    Filter by collection. where collection also know as productClusterId
    """
    collection: String = ""
    """
    Filter by availability at a specific sales channel. e.g.: salesChannel:4 if want filter by available products for the sales channel 4
    """
    salesChannel: String = ""
    """
    Order by a criteria. OrderByPriceDESC/OrderByPriceASC, OrderByTopSaleDESC, OrderByReviewRateDESC, OrderByNameASC/OrderByNameDESC, OrderByReleaseDateDESC, OrderByBestDiscountDESC, OrderByScoreDESC
    """
    orderBy: String = "OrderByScoreDESC"
    """
    Pagination item start
    """
    from: Int = 0
    """
    Pagination item end
    """
    to: Int = 9
    """
    If true, uses isAvailablePerSalesChannel_ parameter on query with segment's sales channel. Will override any given salesChannel arg
    """
    hideUnavailableItems: Boolean = false
  ): [Product]
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  productRecommendations(
    identifier: ProductUniqueIdentifier
    type: CrossSelingInputEnum
  ): [Product]
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  productsByIdentifier(
    field: ProductUniqueIdentifierField!
    values: [ID!]
  ): [Product]
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  """
  Returns facets category
  """
  facets(
    """
    Categories separated by / followed by map. e.g.:  /eletronics/tvs?map=c,c
    """
    facets: String = ""
      @deprecated(reason: "Use 'query' and 'map' field instead")
    """
    Terms that is used in search e.g.: eletronics/samsung
    """
    query: String = ""
    """
    Defines terms types: Brand, Category, Department e.g.: c,b
    """
    map: String = ""
    """
    If true, uses isAvailablePerSalesChannel_ parameter on query with segment's sales channel.
    """
    hideUnavailableItems: Boolean = false
  ): Facets
    @cacheControl(scope: SEGMENT, maxAge: MEDIUM)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  """
  Search for products. e.g.: search(query: 'eletronics', rest: 'lg', map: 'c,b')
  """
  search(
    """
    Terms that is used in search e.g.: eletronics/samsung
    """
    query: String = ""
    """
    Defines terms types: Brand, Category, Department e.g.: c,b
    """
    map: String = ""
    """
    Rest terms that is used in search e.g.: samsung,Android7
    """
    rest: String = ""
    """
    Filter by category. {a}/{b} - {a} and {b} are categoryIds
    """
    category: String = ""
    """
    Array of product specification. specificationFilter_{a}:{b} - {a} is the specificationId, {b} = specification value
    """
    specificationFilters: [String]
    """
    Filter by price range. e.g.: {a} TO {b} - {a} is the minimum price "from" and {b} is the highest price "to"
    """
    priceRange: String = ""
    """
    Filter by collection. where collection also know as productClusterId
    """
    collection: String = ""
    """
    Filter by availability at a specific sales channel. e.g.: salesChannel:4 if want filter by available products for the sales channel 4
    """
    salesChannel: String = ""
    """
    Order by a criteria. OrderByPriceDESC/OrderByPriceASC, OrderByTopSaleDESC, OrderByReviewRateDESC, OrderByNameASC/OrderByNameDESC, OrderByReleaseDateDESC, OrderByBestDiscountDESC
    """
    orderBy: String = "OrderByPriceDESC"
    """
    Pagination item start
    """
    from: Int = 0
    """
    Pagination item end
    """
    to: Int = 9
  ): Search
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment
    @deprecated(reason: "Use the 'products' and 'facets' queries separately")

  """
  Returns a specified category
  """
  category(
    """
    Category id
    """
    id: Int
  ): Category @cacheControl(scope: SEGMENT, maxAge: MEDIUM)

  """
  Returns categories tree
  """
  categories(
    """
    Category tree level. Default: 3
    """
    treeLevel: Int = 3
  ): [Category] @cacheControl(scope: SEGMENT, maxAge: MEDIUM)

  """
  Returns a specified brand
  """
  brand(
    """
    Brand id
    """
    id: Int
  ): Brand @cacheControl(scope: PUBLIC, maxAge: MEDIUM)

  """
  Returns brands list
  """
  brands: [Brand] @cacheControl(scope: PUBLIC, maxAge: MEDIUM)

  """
  Returns orderForm shipping simulation
  """
  shipping(
    """
    List of SKU products
    """
    items: [ShippingItem]
    """
    Postal code to freight calculator
    """
    postalCode: String
    """
    geoCoordinates for freight calculator
    """
    geoCoordinates: [String]
    """
    Country of postal code
    """
    country: String
  ): ShippingData
    @cacheControl(scope: SEGMENT, maxAge: MEDIUM)
    @withSegment
    @withOrderFormId
    @withOwnerId

  """
  Returns checkout cart details
  """
  orderForm: OrderForm
    @cacheControl(maxAge: ZERO, scope: PRIVATE)
    @withOrderFormId
    @withOwnerId
    @withSegment

  """
  returns a certain checkout cart details
  """
  searchOrderForm(orderFormId: String!): OrderForm
    @cacheControl(scope: PRIVATE)
    @withOwnerId

  """
  DEPRECATED
  """
  orders: [Order]
    @cacheControl(scope: PRIVATE)
    @withOrderFormId
    @deprecated(reason: "Use orders endpoint of vtex.orders-graphql instead")

  """
  Returns a specified user order
  """
  order(id: String!): Order @cacheControl(scope: PRIVATE)

  """
  Returns the specified store configurations
  """
  storeConfigs: StoreConfigs

  """
  Returns user profile details
  """
  profile(
    """
    Comma separated fields
    """
    customFields: String
  ): Profile @cacheControl(scope: PRIVATE) @withCurrentProfile

  """
  Get auto complete suggestions in search
  """
  autocomplete(
    """
    Number of items that is returned
    """
    maxRows: Int = 12
    """
    Terms that is used in search e.g.: iphone
    """
    searchTerm: String
  ): Suggestions
    @cacheControl(scope: SEGMENT, maxAge: MEDIUM)
    @withSegment
    @deprecated(reason: "Use the query defined in the search-graphql app")

  """
  Search documents
  """
  documents(
    """
    Schema name. e.g.: CL, AD
    """
    acronym: String
    """
    Fields that will be returned by document. e.g.: _fields=email,firstName,document
    """
    fields: [String]
    """
    Pagination. Default: 1
    """
    page: Int = 1
    """
    Items returned in the page. Default: 15
    """
    pageSize: Int = 15
    """
    Filters the results. eg.: _where=email=my@email.com
    """
    where: String
    """
    Sorts the results. eg.: _sort=firstName ASC
    """
    sort: String
    """
    Defines the Master Data schema to be used
    """
    schema: String
    """
    Defines which account will be required
    """
    account: String
  ): [Document] @cacheControl(scope: PUBLIC, maxAge: SHORT)

  """
  Get document
  """
  document(
    """
    Schema name. e.g.: CL, AD
    """
    acronym: String
    """
    Fields that will be returned in document. e.g.: _fields=email,firstName,document
    """
    fields: [String]
    """
    Document id
    """
    id: String
    """
    Defines in which account the request will be made
    """
    account: String
  ): Document @cacheControl(scope: PUBLIC, maxAge: SHORT)

  """
  Get a document schema
  """
  documentSchema(
    """
    Data entity name. e.g.: CL, AD
    """
    dataEntity: String
    """
    MasterData schema name.
    """
    schema: String
  ): DocumentSchema

  documentPublicSchema(
    """
    Data entity name.
    """
    dataEntity: String!
    """
    MasterData schema name.
    """
    schema: String!
  ): DocumentSchemaV2 @cacheControl(scope: PUBLIC)

  """
  Get the benefits associated with a list of products
  """
  benefits(
    """
    List of Products
    """
    items: [ShippingItem]
  ): [Benefit] @cacheControl(scope: SEGMENT, maxAge: SHORT) @withSegment

  """
  Get the options available to authenticate users
  """
  loginOptions: LoginOptions @cacheControl(scope: PUBLIC, maxAge: MEDIUM)

  """
  Get an object containing the list of the user's loginSessions
  """
  loginSessionsInfo: LoginSessionsInfo @cacheControl(scope: PRIVATE)

  """
  Get the IDs for the provided search context slugs
  """
  searchContextFromParams(
    brand: String
    department: String
    category: String
    subcategory: String
  ): SearchContext @deprecated(reason: "Use the 'pageType' query")

  """
  Get search page type
  """
  pageType(
    """
    URL's pathname
    """
    path: String!
    """
    URL's querystring including '?'
    """
    query: String
  ): PageType @cacheControl(scope: PUBLIC, maxAge: MEDIUM)

  """
  Get logistics information about the store
  """
  logistics: LogisticsData @cacheControl(scope: PUBLIC, maxAge: MEDIUM)

  """
  Get a list of pickup points near specified lat and long
  """
  nearPickupPoints(
    """
    Desired latitude coordinate, for example: -22.944370
    """
    lat: String!
    """
    Desired longitude coordinate, for example: -43.182553
    """
    long: String!
    """
    max distance of pickup points from given coordinates, in kilometers, default value 50
    """
    maxDistance: Int = 50
  ): NearPickupPointQueryResponse

  skuPickupSLAs(
    itemId: String
    seller: String
    lat: String
    long: String
    country: String
  ): [CheckoutSLA]

  skuPickupSLA(
    itemId: String
    seller: String
    lat: String
    long: String
    country: String
    pickupId: String
  ): CheckoutSLA

  """
  Get pickup point by its id
  """
  pickupPoint(id: String!): PickupPoint

  """
  Get profile information to session users
  """
  getSession: Session @cacheControl(scope: PRIVATE)

  """
  Get the Wish List informations by the received id
  """
  list(
    """
    The list document id
    """
    id: ID
  ): List

  """
  Get all lists from the received owner
  """
  listsByOwner(
    """
    The list's owner id
    """
    owner: ID!
    """
    The page that will be fetched
    """
    page: Int = 1
    """
    The page size
    """
    pageSize: Int = 15
  ): [List]

  """
  Get logged in user's last order
  """
  userLastOrder: Order @cacheControl(scope: PRIVATE)

  checkProfileAllowed: UserCondition @cacheControl(scope: PRIVATE) @withSegment

  itemsWithSimulation(
    items: [ItemInput]
    regionId: String
    salesChannel: String
  ): [SKU] @cacheControl(scope: SEGMENT, maxAge: SHORT) @withSegment
}

type Mutation {
  """
  Cart
  """
  addItem(
    """
    Id of orderForm you want to mutate
    """
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    """
    List of items you want to add and their properties
    """
    items: [OrderFormItemInput]
    """
    Optional marketing UTM Params to add them to order form
    """
    utmParams: OrderFormInputUTMParams
    """
    Optional marketing UTMi Params to add them to order form
    """
    utmiParams: OrderFormInputUTMIParams
  ): OrderForm @withSegment @withOrderFormId @withOwnerId
  cancelOrder(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    reason: String
  ): Boolean @withOrderFormId @withOwnerId
  updateItems(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    items: [OrderFormItemInput]
  ): OrderForm
    @withSegment
    @withOrderFormId
    @withOwnerId
    @cacheControl(scope: PRIVATE)

  """
  Used to update the CL entity on masterData.
  This mutation is mostly used on the MyAccount app to update the customer's profile.
  The user needs to be signed in or impersonated to perform this mutation.
  """
  updateProfile(
    """
    The default fields on the CL.
    """
    fields: ProfileInput
    """
    Extra fields that can be added to the CL.
    """
    customFields: [ProfileCustomFieldInput]
  ): Profile @withCurrentProfile @cacheControl(scope: PRIVATE)

  """
  Updates one address related to a customer profile. This is the AD entity on MasterData.
  The user needs to be signed in or impersonated to perform this mutation.
  """
  updateAddress(
    """
    Address's id.
    """
    id: String
    """
    Address's field.
    """
    fields: AddressInput
  ): Profile @withCurrentProfile @cacheControl(scope: PRIVATE)

  """
  Creates one address related to a customer profile. This is the AD entity on MasterData.
  The user needs to be signed in or impersonated to perform this mutation.
  """
  createAddress(fields: AddressInput): Profile
    @withCurrentProfile
    @cacheControl(scope: PRIVATE)
    @deprecated(reason: "Prefer the saveAddress mutation instead.")

  """
  Add a new address to a customer profile. This is the AD entity on MasterData.
  The user needs to be signed in or impersonated to perform this mutation.
  """
  saveAddress(address: AddressInput!): Address!
    @withCurrentProfile
    @cacheControl(scope: PRIVATE)

  """
  Deletes an address related to a customer profile. This is the AD entity on MasterData.
  The user needs to be signed in or impersonated to perform this mutation.
  """
  deleteAddress(
    """
    Address's id.
    """
    id: String
  ): Profile @withCurrentProfile @cacheControl(scope: PRIVATE)

  """
  Updates the Profile Picture by erasing the old ones DEPRECATED
  """
  updateProfilePicture(
    """
    File being uploaded
    """
    file: Upload!
    """
    Attachment's field name (default: profilePicture)
    """
    field: String @deprecated
  ): Profile @withCurrentProfile @deprecated @cacheControl(scope: PRIVATE)

  """
  Uploads the Profile Picture by appending to the existing ones DEPRECATED
  """
  uploadProfilePicture(
    """
    File being uploaded
    """
    file: Upload!
    """
    Attachment's field name (default: profilePicture)
    """
    field: String
  ): Profile @withCurrentProfile @deprecated @cacheControl(scope: PRIVATE)

  """
  Subscribe to newsletter
  """
  subscribeNewsletter(
    email: String
    isNewsletterOptIn: Boolean
    fields: NewsletterFieldsInput
  ): Boolean @cacheControl(scope: PRIVATE)

  """
  Order Form
  """
  updateOrderFormProfile(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    fields: OrderFormProfileInput
  ): OrderForm @withOrderFormId @withOwnerId
  updateOrderFormShipping(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    address: OrderFormAddressInput
  ): OrderForm @withOrderFormId @withOwnerId
  updateOrderFormPayment(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    payments: [OrderFormPaymentInput]
  ): OrderForm @withOrderFormId @withOwnerId
  updateOrderFormIgnoreProfile(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    ignoreProfileData: Boolean
  ): OrderForm @withOrderFormId @withOwnerId
  addOrderFormPaymentToken(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    paymentToken: OrderFormPaymentTokenInput
  ): OrderForm @withOrderFormId @withOwnerId
  setOrderFormCustomData(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    appId: String
    field: String
    value: String
  ): OrderForm @withOrderFormId @withOwnerId
  addAssemblyOptions(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    itemId: String
    assemblyOptionsId: String
    options: [AssemblyOptionInput]
  ): OrderForm @withOrderFormId @withOwnerId
  updateOrderFormCheckin(
    orderFormId: String
      @deprecated(
        reason: "Field is no longer needed. Checkout cookie is automatically taken into account now"
      )
    checkin: OrderFormCheckinInput
  ): OrderForm @withOrderFormId @withOwnerId @cacheControl(scope: PRIVATE)

  """
  Payment
  """
  createPaymentSession: PaymentSession
  createPaymentTokens(
    sessionId: String
    payments: [PaymentInput]
  ): [PaymentToken]
  setPlaceholder(fields: PlaceholderInput): Boolean
    @cacheControl(scope: PRIVATE)

  """
  Send access key to user email
  """
  sendEmailVerification(
    """
    User email
    """
    email: String!
  ): Boolean @cacheControl(scope: PRIVATE)

  """
  Access key sign in mode
  """
  accessKeySignIn(
    """
    User email
    """
    email: String!
    """
    Access key that was received
    """
    code: String!
  ): String @cacheControl(scope: PRIVATE)

  """
  Classic sign in mode
  """
  classicSignIn(
    """
    User email
    """
    email: String!
    """
    User password
    """
    password: String!
  ): String @cacheControl(scope: PRIVATE)

  """
  OAuth to login with Social Account
  """
  oAuth(
    """
    The OAuth Provider, e.g: Google, Facebook
    """
    provider: String
    """
    The URL to be redirected after authentication
    """
    redirectUrl: String
  ): String @cacheControl(scope: PRIVATE)

  """
  To recovery password you need to get your email, password and access code
  """
  recoveryPassword(
    """
    User email
    """
    email: String!
    """
    User password
    """
    newPassword: String!
    """
    Access Code
    """
    code: String!
  ): String @cacheControl(scope: PRIVATE)

  """
  Change password using email and old password
  """
  redefinePassword(
    """
    User's email
    """
    email: String!
    """
    User's current password
    """
    currentPassword: String!
    """
    User's new password
    """
    newPassword: String!
    """
    Your app's identification to help VTEX ID track requests
    """
    vtexIdVersion: String
  ): String @cacheControl(scope: PRIVATE)

  """
  Invalidate VtexIdclientAutCookie
  """
  logout: Boolean
    @cacheControl(scope: PRIVATE)
    @deprecated(
      reason: "See https://github.com/vtex-apps/store-graphql/issues/182"
    )

  """
  Logs out from a specific login session
  """
  logOutFromSession(sessionId: ID): ID @cacheControl(scope: PRIVATE)

  """
  Impersonate a customer
  """
  impersonate(
    """
    The email which will be used to impersonate a user
    """
    email: String!
  ): Session @withOrderFormId @withOwnerId @cacheControl(scope: PRIVATE)

  """
  Depersonify a customer
  """
  depersonify: Boolean
    @withOrderFormId
    @withOwnerId
    @withSegment
    @cacheControl(scope: PRIVATE)

  """
  Document
  """
  createDocument(
    acronym: String!
    document: DocumentInput
    account: String
    schema: String
  ): DocumentResponse @withAuthMetrics
  updateDocument(
    acronym: String!
    document: DocumentInput
    account: String
    schema: String
  ): DocumentResponse @withAuthMetrics
  deleteDocument(acronym: String!, documentId: String!): DocumentResponse
    @withAuthMetrics
  uploadAttachment(
    acronym: String!
    documentId: String!
    field: String!
    file: Upload!
  ): AttachmentResponse @withAuthMetrics
  createDocumentV2(
    dataEntity: String!
    document: DocumentInputV2
    account: String
    schema: String
  ): DocumentResponseV2 @cacheControl(scope: PRIVATE) @withAuthMetrics

  """
  List
  """
  createList(list: ListInput): List
    @cacheControl(scope: PRIVATE)
    @withAuthMetrics
  """
   Update the list informations and its items.
  If the item given does not have the itemId, add it as a new item in the list.
  If the item given has got an itemId, but its quantity is 0, remove it from the list.
  Otherwise, update it.
  """
  updateList(id: ID!, list: ListInput): List
    @cacheControl(scope: PRIVATE)
    @withAuthMetrics
  deleteList(id: ID!): List @cacheControl(scope: PRIVATE) @withAuthMetrics

  savePickupInSession(address: OrderFormAddressInput, name: String): Session
    @cacheControl(scope: PRIVATE)

  """
  Set new orderForm.
  """
  newOrderForm(orderFormId: String): OrderForm
    @cacheControl(scope: PRIVATE)
    @withOrderFormId
    @withOwnerId
}
