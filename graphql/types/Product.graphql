type Product {
  """
  Brand of the product
  """
  brand: String @translatableV2
  """
  Id of the brand of the product
  """
  brandId: Int
  """
  linkText is used as cacheId
  """
  cacheId: ID
  categoryId: ID
  """
  Categories of the product
  """
  categories: [String]
    @deprecated(
      reason: "Use 'categoryTree' field for internationalization support"
    )
  """
  Categories ids of the product
  """
  categoriesIds: [String]
    @deprecated(
      reason: "Use 'categoryTree' field for internationalization support"
    )
  """
  Product's categories
  """
  categoryTree: [Category]
  """
  List of related products
  """
  clusterHighlights: [ClusterHighlight]
  productClusters: [ProductClusters]
  """
  Product description
  """
  description: String @translatableV2
  """
  SKU objects of the product
  """
  items: [SKU]
  """
  Product URL
  """
  link: String
  """
  Product slug
  """
  linkText: String
  """
  Product ID
  """
  productId: ID
  """
  Product name
  """
  productName: String @translatableV2
  """
  Array of product properties
  """
  properties: [Property]
  """
  Array of product properties
  """
  propertyGroups: [PropertyGroup]
  """
  Product reference
  """
  productReference: String
  """
  Title used by html tag
  """
  titleTag: String @translatableV2
  """
  Description used by html tag
  """
  metaTagDescription: String @translatableV2
  """
  Related Products
  """
  recommendations: Recommendation
  """
  JSON specification of the product
  """
  jsonSpecifications: String
  """
  List of benefits associated with this product
  """
  benefits: [Benefit]
  itemMetadata: ItemMetadata
  """
  Array of product SpecificationGroup
  """
  specificationGroups: [SpecificationGroup]
}

type OnlyProduct {
  brand: String
  categoryId: ID
  categories: [String]
    @deprecated(
      reason: "Use 'categoryTree' field for internationalization support"
    )
  categoriesIds: [String]
    @deprecated(
      reason: "Use 'categoryTree' field for internationalization support"
    )
  categoryTree: [Category]
  clusterHighlights: [ClusterHighlight]
  productClusters: [ProductClusters]
  description: String
  link: String
  linkText: String
  productId: ID
  productName: String
  properties: [Property]
  propertyGroups: [PropertyGroup]
  productReference: String
  recommendations: Recommendation
  jsonSpecifications: String
}

type ProductClusters {
  id: ID
  name: String
}

type ClusterHighlight {
  id: ID
  name: String
}

type Seller {
  sellerId: ID
  sellerName: String
  addToCartLink: String
  sellerDefault: Boolean
  commertialOffer: Offer
  error: String
}

type Recommendation {
  buy: [Product]
  view: [Product]
  similars: [Product]
}

type SKU {
  itemId: ID
  name: String @translatableV2
  nameComplete: String @translatableV2
  complementName: String
  ean: String
  referenceId: [Reference]
  measurementUnit: String
  unitMultiplier: Float
  kitItems: [KitItem]
  images(quantity: Int = 10): [Image]
  videos: [Video]
  sellers: [Seller]
  variations: [Property]
  attachments: [Attachment]
  calculatedAttachments: String
  productName: String @translatableV2
  productDescription: String @translatableV2
  brandName: String @translatableV2
  skuSpecifications: [skuSpecification]
  productSpecifications: [productSpecification]
}

type skuSpecification {
  fieldName: String @translatableV2
  fieldValues: [String] @translatableV2
}

type productSpecification {
  fieldName: String @translatableV2
  fieldValues: [String] @translatableV2
}

input ProductUniqueIdentifier {
  field: ProductUniqueIdentifierField!
  value: ID!
}

enum ProductUniqueIdentifierField {
  id
  slug
  ean
  reference
  sku
}

type KitItem {
  itemId: ID
  amount: Int
  product: OnlyProduct
  sku: SKU
}

type Attachment {
  id: ID
  name: String
  required: Boolean
  domainValues: [DomainValues]
}

type DomainValues {
  FieldName: String
  MaxCaracters: String
  DomainValues: String
}

enum InstallmentsCriteria {
  MAX
  MIN
  ALL
}

type Offer {
  Installments(
    criteria: InstallmentsCriteria = ALL
    rates: Boolean = true
  ): [Installment]
  Price: Float
  ListPrice: Float
  spotPrice: Float
  PriceWithoutDiscount: Float
  RewardValue: Float
  PriceValidUntil: String
  AvailableQuantity: Float
  Tax: Float
  CacheVersionUsedToCallCheckout: String
  DeliverySlaSamples: [DeliverySlaSamples]
  """
  List of discount highlights
  """
  discountHighlights: [Discount!]
  teasers: [Teaser!]
  """
  List of gifts associated with the product
  """
  giftSkuIds: [String]
}

type Parameter {
  name: String
  value: String
}

type TeaserCondition {
  minimumQuantity: Int
  parameters: [Parameter]
}

type TeaserEffect {
  parameters: [Parameter]
}

type Teaser {
  name: String
  conditions: TeaserCondition
  effects: TeaserEffect
}

"""
Discount object
"""
type Discount {
  """
  Discount name
  """
  name: String
}

type DeliverySlaSamples {
  DeliverySlaPerTypes: [DeliverySlaPerTypes]
  Region: Region
}

type DeliverySlaPerTypes {
  TypeName: String
  Price: Float
  EstimatedTimeSpanToDelivery: String
}

type Region {
  IsPersisted: Boolean
  IsRemoved: Boolean
  Id: ID
  Name: String
  CountryCode: String
  ZipCode: String
  CultureInfoName: String
}

type Image {
  cacheId: ID
  imageId: ID
  imageLabel: String
  imageTag: String
  imageUrl: String @toVtexAssets
  imageText: String
}

type Video {
  videoUrl: String
}

type SpecificationGroup {
  name: String @translatableV2
  specifications: [SpecificationGroupProperty]
}

type SpecificationGroupProperty {
  name: String @translatableV2
  values: [String] @translatableV2
}

type Property {
  name: String
  values: [String]
}

type PropertyGroup {
  name: String
  properties: [String]
}

type Installment {
  Value: Float
  InterestRate: Float
  TotalValuePlusInterestRate: Float
  NumberOfInstallments: Int
  PaymentSystemName: String
  PaymentSystemGroupName: String
  Name: String
}

type Reference {
  Key: String
  Value: String
}

enum CrossSelingInputEnum {
  buy
  similars
  view
  viewAndBought
  accessories
  suggestions
}

input ItemInput {
  itemId: ID
  sellers: [SellerInput]
}

input SellerInput {
  sellerId: ID
}
